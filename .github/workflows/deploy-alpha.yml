name: Deploy Alpha Version

on:
  pull_request:
    branches:
      - master

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Debug PR info
        run: |
          echo "PR from: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "Base repo: ${{ github.repository }}"
          echo "Is fork: ${{ github.event.pull_request.head.repo.full_name != github.repository }}"
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      - name: Run linter
        run: npm run lint

  deploy-alpha:
    needs: lint
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_ACTIONS_TOKEN }}
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      - name: Build project
        run: npm run dist
      - name: Validate build output
        run: |
          if [ ! -d "lib" ]; then
            echo "❌ lib directory not found"
            exit 1
          fi
          if [ ! -d "dist" ]; then
            echo "❌ dist directory not found"
            exit 1
          fi
          echo "✅ Build output validated (lib and dist folders created)"
      - name: Authenticate with NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
      - name: Generate alpha version
        id: generate_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date +'%H%M%S')
          ALPHA_VERSION="${CURRENT_VERSION}-alpha.pr${{ github.event.pull_request.number }}.${TIMESTAMP}"
          echo "alpha_version=${ALPHA_VERSION}" >> $GITHUB_ENV

          # Create alpha version info file instead of modifying package.json
          echo "# Alpha Version Info" > ALPHA_VERSION.md
          echo "" >> ALPHA_VERSION.md
          echo "**Current Alpha Version:** \`${ALPHA_VERSION}\`" >> ALPHA_VERSION.md
          echo "**Base Version:** \`${CURRENT_VERSION}\`" >> ALPHA_VERSION.md
          echo "**PR Number:** #${{ github.event.pull_request.number }}" >> ALPHA_VERSION.md
          echo "**Generated:** $(date)" >> ALPHA_VERSION.md
          echo "**NPM Command:** \`npm install react-jsonschema-form-extras@${ALPHA_VERSION}\`" >> ALPHA_VERSION.md

          # Update package.json only for publishing (without committing)
          jq ".version = \"${ALPHA_VERSION}\"" package.json > package.json.tmp && mv package.json.tmp package.json
          npm ci --legacy-peer-deps
      - name: Publish Alpha Version
        run: |
          npm publish --tag alpha
          echo "✅ Successfully published alpha version: ${alpha_version}"
        if: endsWith(github.event.pull_request.user.login, '[bot]') == false
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          alpha_version: ${{ env.alpha_version }}
      - name: Commit alpha version change (for testing)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ALPHA_VERSION.md
          git commit -m "[alpha] Published version ${alpha_version} for PR #${{ github.event.pull_request.number }}"
          git push
          echo "✅ Alpha version info committed to PR branch"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTIONS_TOKEN }}
          alpha_version: ${{ env.alpha_version }}
