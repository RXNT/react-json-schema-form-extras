name: Deploy Alpha Version

on:
  pull_request:
    branches:
      - master

jobs:
  test-secret:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Check required tokens
        run: |
          FAILED=false

          if [ -z "${GH_ACTIONS_TOKEN}" ]; then
            echo "❌ GH_ACTIONS_TOKEN is NOT set"
            FAILED=true
          else
            echo "✅ GH_ACTIONS_TOKEN is set"
          fi

          if [ -z "${NPM_PUBLISH_TOKEN}" ]; then
            echo "❌ NPM_PUBLISH_TOKEN is NOT set"
            FAILED=true
          else
            echo "✅ NPM_PUBLISH_TOKEN is set"
          fi

          if [ "$FAILED" = true ]; then
            echo "❌ One or more required tokens are missing"
            exit 1
          fi

          echo "✅ All required tokens are configured"
        env:
          GH_ACTIONS_TOKEN: ${{ secrets.GH_ACTIONS_TOKEN }}
          NPM_PUBLISH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  lint:
    name: Lint
    needs: test-secret
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Debug PR info
        run: |
          echo "PR from: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "Base repo: ${{ github.repository }}"
          echo "Is fork: ${{ github.event.pull_request.head.repo.full_name != github.repository }}"
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      - name: Run linter
        run: npm run lint

  check-and-bump-version:
    needs: lint
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_ACTIONS_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      - name: Check and bump version if needed
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: ${CURRENT_VERSION}"

          # Get latest stable NPM version (excluding alpha/beta/prerelease)
          LATEST_NPM_VERSION=$(npm view react-jsonschema-form-extras versions --json | jq -r '.[]' | grep -v '\-' | tail -1 2>/dev/null || echo "0.0.0")
          echo "Latest stable NPM version: ${LATEST_NPM_VERSION}"

          # Clean current version (remove any prerelease suffix)
          CLEAN_CURRENT_VERSION=$(echo "${CURRENT_VERSION}" | sed 's/-.*$//')
          echo "Clean version: ${CLEAN_CURRENT_VERSION}"

          # Calculate next version after NPM version
          NEXT_VERSION=$(node -e "
            const current = '${CLEAN_CURRENT_VERSION}';
            const npm = '${LATEST_NPM_VERSION}';
            
            // Validate that npm version is a proper semver (not empty or invalid)
            const npmParts = npm.split('.');
            if (npmParts.length !== 3 || npmParts.some(part => isNaN(Number(part)))) {
              console.log('no-bump');
              return;
            }
            
            const currentParts = current.split('.').map(Number);
            const npmPartsNum = npmParts.map(Number);
            
            // Check if current is greater than npm
            const isGreater = currentParts[0] > npmPartsNum[0] || 
                             (currentParts[0] === npmPartsNum[0] && currentParts[1] > npmPartsNum[1]) ||
                             (currentParts[0] === npmPartsNum[0] && currentParts[1] === npmPartsNum[1] && currentParts[2] > npmPartsNum[2]);
            
            if (isGreater) {
              console.log('no-bump');
            } else {
              // Calculate next patch version after NPM
              const nextVersion = npmPartsNum[0] + '.' + npmPartsNum[1] + '.' + (npmPartsNum[2] + 1);
              console.log(nextVersion);
            }
          ")

          if [ "${NEXT_VERSION}" = "no-bump" ]; then
            echo "✅ Current version is already newer than NPM"
          else
            echo "📦 Version bump needed to: ${NEXT_VERSION}"
            
            # Set the exact next version
            npm version "${NEXT_VERSION}" --no-git-tag-version
            echo "🚀 Bumped to: ${NEXT_VERSION}"
            
            # Commit to PR branch
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add package.json package-lock.json
            git commit -m "[skip ci] 🔖 Bump version to ${NEXT_VERSION}"
            git push origin ${{ github.event.pull_request.head.ref }}
            
            echo "✅ Version bumped and committed"
          fi

  deploy-alpha:
    needs: check-and-bump-version
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Checkout code (after version bump)
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_ACTIONS_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      - name: Build project
        run: npm run dist
      - name: Validate build output
        run: |
          if [ ! -d "lib" ]; then
            echo "❌ lib directory not found"
            exit 1
          fi
          if [ ! -d "dist" ]; then
            echo "❌ dist directory not found"
            exit 1
          fi
          echo "✅ Build output validated (lib and dist folders created)"
      - name: Authenticate with NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
      - name: Generate alpha version
        id: generate_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date +'%H%M%S')
          ALPHA_VERSION="${CURRENT_VERSION}-alpha.${TIMESTAMP}"
          echo "alpha_version=${ALPHA_VERSION}" >> $GITHUB_ENV

          # Update package.json only for publishing (without committing)
          jq ".version = \"${ALPHA_VERSION}\"" package.json > package.json.tmp && mv package.json.tmp package.json
          npm ci --legacy-peer-deps
      - name: Publish Alpha Version
        run: |
          npm publish --tag alpha
          echo "✅ Successfully published alpha version: ${alpha_version}"
          echo ""
          echo "🚀 To test this alpha version, run:"
          echo "npm install react-jsonschema-form-extras@${alpha_version}"
        if: endsWith(github.event.pull_request.user.login, '[bot]') == false
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          alpha_version: ${{ env.alpha_version }}
