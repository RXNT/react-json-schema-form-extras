name: Deploy to NPM

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_ACTIONS_TOKEN }}
          fetch-depth: 0
          ref: master
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      - name: Build project
        run: npm run dist
      - name: Validate build output
        run: |
          if [ ! -d "lib" ]; then
            echo "❌ lib directory not found"
            exit 1
          fi
          if [ ! -d "dist" ]; then
            echo "❌ dist directory not found"
            exit 1
          fi
          echo "✅ Build output validated (lib and dist folders created)"
      - name: Bump version
        id: bump_version
        run: |
          NEW_VERSION=$(npm version patch --no-git-tag-version)
          echo "new_version=${NEW_VERSION}" >> $GITHUB_ENV
      - name: Authenticate with NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
      - name: Publish Release Version
        run: |
          npm publish
          echo "✅ Successfully published to NPM"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
      - name: Commit and push version bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "[skip actions] bump to version ${new_version}"
          git push origin master
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACTIONS_TOKEN }}
          new_version: ${{ env.new_version }}
      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GH_ACTIONS_TOKEN }}
          new_version: ${{ env.new_version }}
        run: |
          gh release create "${new_version}" --generate-notes --latest --target master
